[{"path":"https://servinagrero.github.io/pufr/articles/pufr.html","id":"physical-unclonable-functions","dir":"Articles","previous_headings":"","what":"Physical Unclonable Functions","title":"Introduction to pufr","text":"Physical Unclonable Functions, commonly knows PUFs, mechanism leverages manufacture variability devices generate secrets. PUF interrogated means challenge returns response, normally bit. challenge corresponding response called Challenge Response Pair(CRP). set CRPs physical device different CRPs different device.","code":""},{"path":"https://servinagrero.github.io/pufr/articles/pufr.html","id":"getting-started","dir":"Articles","previous_headings":"Physical Unclonable Functions","what":"Getting started","title":"Introduction to pufr","text":"library can make use parallel make computations faster. packet installed, loaded context created automatically.","code":"library(pufr)"},{"path":"https://servinagrero.github.io/pufr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sergio Vinagrero. Maintainer.","code":""},{"path":"https://servinagrero.github.io/pufr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vinagrero S (????). pufr: Tools Analysis Physical Unclonable Functions (PUFs). R package version 0.4.0, https://github.com/servinagrero/pufr,https://servinagrero.github.io/pufr/.","code":"@Manual{pufr,   title = {{pufr}: Tools For Analysis Of Physical Unclonable Functions (PUFs)},   author = {Sergio Vinagrero},   url = {https://github.com/servinagrero/pufr, https://servinagrero.github.io/pufr/},   note = {R package version 0.4.0}, }"},{"path":[]},{"path":"https://servinagrero.github.io/pufr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"Physical Unclonable Functions, commonly knows PUFs, mechanism leverages manufacture variability devices generate secrets. PUFs can used identify devices generate secrets. package provides functions algorithms analysis evaluation. can learn PUFs evaluation vignette(\"pufr\").","code":""},{"path":"https://servinagrero.github.io/pufr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"can install development version pufr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"servinagrero/pufr\")"},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare a matrix by pairs of rows — compare_pairwise","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"pair rows compared using given function. pairs chosen without repetition.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"","code":"compare_pairwise(m, fn, ...)"},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"m Vector values. fn Function receives two rows. ... Rest arguments passed fn.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"Vector containing results comparisons.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"","code":"#' Compare a matrix by pairs of rows m <- matrix(rbits(25), 5, 5) res <- compare_pairwise(m, hamming_dist, norm = TRUE) res #>  [1] 0.2 0.4 0.6 0.4 0.6 0.4 0.2 0.6 0.8 0.6 length(res) == (5 * 4 / 2) #> [1] TRUE  ## Equivalence to uniqueness res <- compare_pairwise(m, function(f, s) 1 - hamming_dist(f, s, norm = TRUE)) all(uniqueness(m) == res) #> [1] TRUE"},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming weight of CRPs — crps_weight","title":"Hamming weight of CRPs — crps_weight","text":"function wrapper around hamming_weight used vectors 2D matrix. function assumes CRPs supplied 2D matrix, row corresponds device column corresponds CRP. another convetion used, modify parameter margin accordingly.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming weight of CRPs — crps_weight","text":"","code":"crps_weight(crps, margin = 1)"},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming weight of CRPs — crps_weight","text":"crps binary vector 2D matrix. margin margin calculate Hamming weight. 1 rows 2 columns.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming weight of CRPs — crps_weight","text":"Hamming weight CRPs","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"uniformity","dir":"Reference","previous_headings":"","what":"Uniformity","title":"Hamming weight of CRPs — crps_weight","text":"Uniformity measures distribution 1s 0s across CRPs device. calculate uniformity, margin 1. $$Uniformity = \\frac{1}{\\#C} \\sum_{c = 0}^{\\#C} crp_c$$","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"bitaliasing","dir":"Reference","previous_headings":"","what":"Bitaliasing","title":"Hamming weight of CRPs — crps_weight","text":"Bitaliasing measures distribution 1s 0s single CRPs across devices. calculate bitaliasing, margin 2. $$Bitaliasing = \\frac{1}{\\#D} \\sum_{d = 0}^{\\#D} crp_d$$","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming weight of CRPs — crps_weight","text":"","code":"## Hamming weight of a binary vector v <- rbits(50) crps_weight(v) #> [1] 0.56  ## Uniformity of a set of CRPs mat <- matrix(rbits(500), nrow = 5, ncol = 10) #> Warning: data length differs from size of matrix: [500 != 5 x 10] crps_weight(mat, 1) #> [1] 0.6 0.5 0.4 0.6 0.5  ## Bitaliasing of a set of CRPs crps_weight(mat, 2) #>  [1] 0.4 0.4 0.8 0.8 0.4 0.8 0.4 0.4 0.2 0.6"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy for binary vectors — entropy_bits","title":"Shannon entropy for binary vectors — entropy_bits","text":"probability \\(p(1)\\) corresponds normalized hamming_weight vector.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy for binary vectors — entropy_bits","text":"","code":"entropy_bits(v)"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy for binary vectors — entropy_bits","text":"v binary vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy for binary vectors — entropy_bits","text":"entropy vector","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shannon entropy for binary vectors — entropy_bits","text":"","code":"entropy_bits(c(0, 0, 0)) #> [1] 0 entropy_bits(c(1, 1, 1)) #> [1] 0 entropy_bits(rbits(20)) #> [1] 0.9927745"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy for probabilities — entropy_p","title":"Shannon entropy for probabilities — entropy_p","text":"Shannon entropy probabilities","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy for probabilities — entropy_p","text":"","code":"entropy_p(v)"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy for probabilities — entropy_p","text":"v vector probabilities","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy for probabilities — entropy_p","text":"Shannon entropy probability","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy for numeric values — entropy_shannon","title":"Shannon entropy for numeric values — entropy_shannon","text":"Shannon entropy vector calculated : $$H(X) := -\\sum_{x \\\\chi} p(x) \\log p(x) = E[-\\log p(x)]$$","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy for numeric values — entropy_shannon","text":"","code":"entropy_shannon(v)"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy for numeric values — entropy_shannon","text":"v vector values","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy for numeric values — entropy_shannon","text":"entropy vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shannon entropy for numeric values — entropy_shannon","text":"calculating probabilities, assumed convention \\((0\\cdot \\log 0 = 0)\\) \\((1 \\cdot \\log 1 = 1)\\).","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming distance of two vectors — hamming_dist","title":"Hamming distance of two vectors — hamming_dist","text":"Hamming distance two vectors corresponds number positions values differ.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming distance of two vectors — hamming_dist","text":"","code":"hamming_dist(x, y, norm = FALSE)  x %<>% y  x %<\/>% y"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming distance of two vectors — hamming_dist","text":"x numeric logical vector y numeric logical vector norm TRUE (default FALSE) normalize distance vector length","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming distance of two vectors — hamming_dist","text":"Hamming distance","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hamming distance of two vectors — hamming_dist","text":"NAs discarded vectors.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming distance of two vectors — hamming_dist","text":"","code":"hamming_dist(c(0, 1, 0), c(0, 0, 0)) #> [1] 1 hamming_dist(c(0, 1, 0), c(0, 0, 0), norm = TRUE) #> [1] 0.3333333  ## NAs in any of the vectors are discarded hamming_dist(c(1, NA, 3, 4, 5), c(1, 2, NA, 4, 5)) #> [1] 0 c(0, 1, 0) %<>% c(1, 0, 0) #> [1] 2 c(0, 1, 0) %<\/>% c(1, 0, 0) #> [1] 0.6666667"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming weight of a binary vector — hamming_weight","title":"Hamming weight of a binary vector — hamming_weight","text":"Hamming weight number non null symbols vector. binary vector, corresponds number 1s.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming weight of a binary vector — hamming_weight","text":"","code":"hamming_weight(v, norm = FALSE)"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming weight of a binary vector — hamming_weight","text":"v logical numeric vector norm TRUE (default FALSE) normalize vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming weight of a binary vector — hamming_weight","text":"Hamming weight","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hamming weight of a binary vector — hamming_weight","text":"NAs discarded vector.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming weight of a binary vector — hamming_weight","text":"","code":"## Weight of the vector hamming_weight(c(0, 1, 1)) #> [1] 2  ## Normalized weight hamming_weight(c(0, 1, 1), norm = TRUE) #> [1] 0.6666667  ## `NA` are discarded hamming_weight(c(1, 0, NA), norm = TRUE) #> [1] 0.5"},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Intra Hamming distance of CRPs — intra_hd","title":"Intra Hamming distance of CRPs — intra_hd","text":"intra Hamming distance two sets CRPs measures numbers CRPs differ. N sets CRPs equal intra Hamming distances 0. response reliable change time, thus, intra Hamming distance equal 0. crps 2D matrix, assumed row corresponds sample column CRP. ref_sample say row sample taken reference. case 3D matrix, row corresponds device, column CRP 3rd dimension different sample.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intra Hamming distance of CRPs — intra_hd","text":"","code":"intra_hd(crps, ref_sample = 1)"},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intra Hamming distance of CRPs — intra_hd","text":"crps binary vector, 2D matrix 3D array. ref_sample Numeric index reference sample: crps vector, index reference sample; crps 2D matrix, row use reference; crps 3D array,row 3rd dimension matrix.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intra Hamming distance of CRPs — intra_hd","text":"crps vector, intra Hamming distance vector. crps 2D matrix, reliability column vector size ncol(crps) - 1. crps 3D array, 2D matrix row contains intra Hamming distance samples.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Intra Hamming distance of CRPs — intra_hd","text":"order samples calculated setdiff(seq_len(nsamples), ref_sample) nsamples corresponds nrow(crps) case 2D matrix dim(crps)[3] case 3D matrix.","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intra Hamming distance of CRPs — intra_hd","text":"","code":"#' ## Bit values v <- c(1, 0, 0, 1, 1) intra_hd(v, 1) #> [1] 0.5  ## Set of CRPs mat <- matrix(rbits(50), nrow = 5, ncol = 10) intra_hd(mat, 1) #>  [1] 0.50 0.25 0.25 0.00 0.75 0.00 0.75 0.75 0.50 0.75  ## Set of devices with their respective samples mat <- array(rbits(150), dim = c(5, 10, 3)) intra_hd(mat) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]  1.0  0.5  0.5  0.5  0.5  0.5  1.0  0.0    0   0.0 #> [2,]  0.5  0.5  1.0  0.5  0.5  0.0  0.5  0.0    0   1.0 #> [3,]  0.0  0.5  0.5  0.5  0.5  0.0  0.5  0.5    0   1.0 #> [4,]  1.0  0.5  1.0  0.0  0.5  0.5  1.0  0.0    0   0.5 #> [5,]  0.0  0.5  0.0  0.5  0.5  0.0  0.0  0.5    1   0.0"},{"path":"https://servinagrero.github.io/pufr/reference/par_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic parallelization of apply — par_apply","title":"Automatic parallelization of apply — par_apply","text":"Use parallel::parApply parallel context created register_parallel. Otherwise use base::apply.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/par_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic parallelization of apply — par_apply","text":"","code":"par_apply(v, margin, fn, ...)"},{"path":"https://servinagrero.github.io/pufr/reference/par_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic parallelization of apply — par_apply","text":"v Vector values margin Vector giving subscripts function applied . E.g., matrix 1 indicates rows, 2 indicates columns, c(1, 2) indicates rows columns. X named dimnames, can character vector selecting dimension names. fn Function apply. ... Rest arguments passed fn.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/par_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic parallelization of apply — par_apply","text":"Vector array list values obtained applying function margins array matrix.","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/par_vapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic parallelization of vapply — par_vapply","title":"Automatic parallelization of vapply — par_vapply","text":"Use parallel::parApply parallel context created register_parallel. Otherwise use base::apply.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/par_vapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic parallelization of vapply — par_vapply","text":"","code":"par_vapply(v, fn, value = NULL, ...)"},{"path":"https://servinagrero.github.io/pufr/reference/par_vapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic parallelization of vapply — par_vapply","text":"v Vector values. fn Function apply. value Expected type value. ... Rest arguments passed fn.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/par_vapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic parallelization of vapply — par_vapply","text":"Vector array list values obtained applying function margins array matrix.","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratio of bits in a binary vector — ratio_bits","title":"Ratio of bits in a binary vector — ratio_bits","text":"ratio calculated number 1s minus number 0s. positive ratio indicates 1s 0s, negative results indicates opposite. NA accounted calculate length vector.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratio of bits in a binary vector — ratio_bits","text":"","code":"ratio_bits(v)"},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratio of bits in a binary vector — ratio_bits","text":"v binary vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ratio of bits in a binary vector — ratio_bits","text":"ratio bits binary vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ratio of bits in a binary vector — ratio_bits","text":"using hamming_weight function, ratio can calculated following way. $$Ratio = \\frac{HW(v) - (\\#v - HW(v))}{\\#v} = 2 \\cdot HW_{norm}(v) - 1$$ operator \\(\\#v\\) denotes number elements vector \\(v\\).","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ratio of bits in a binary vector — ratio_bits","text":"","code":"## Negative ratio ratio_bits(c(0, 1, 0)) #> [1] -0.3333333  ## Positive ratio ratio_bits(c(1, 1, 0)) #> [1] 0.3333333  ## `NA` are discarded ratio_bits(c(1, 1, 0, NA, NA)) #> [1] 0.3333333"},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":null,"dir":"Reference","previous_headings":"","what":"Random binary vector — rbits","title":"Random binary vector — rbits","text":"function wrapper around sample generate binary vectors.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random binary vector — rbits","text":"","code":"rbits(size, p = 0.5)"},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random binary vector — rbits","text":"size size vector p Probability obtaining 1. default 0.5.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random binary vector — rbits","text":"generated binary vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random binary vector — rbits","text":"","code":"## Unbiased probabilities rbits(10) #>  [1] 1 1 0 1 1 1 0 0 0 0  ## Biased probabilities rbits(10, p = 0.8) #>  [1] 1 1 1 1 1 1 0 1 1 0"},{"path":"https://servinagrero.github.io/pufr/reference/register_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a parallel cluster — register_parallel","title":"Register a parallel cluster — register_parallel","text":"user create cluster close .","code":""},{"path":"https://servinagrero.github.io/pufr/reference/register_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a parallel cluster — register_parallel","text":"","code":"register_parallel(ctx)"},{"path":"https://servinagrero.github.io/pufr/reference/register_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a parallel cluster — register_parallel","text":"ctx cluster created parallel::makeCluster()","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/register_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a parallel cluster — register_parallel","text":"","code":"if (FALSE) { ctx <- parallel::makeCluster(2) register_parallel(ctx) }"},{"path":"https://servinagrero.github.io/pufr/reference/reliability.html","id":null,"dir":"Reference","previous_headings":"","what":"Reliability of CRPs — reliability","title":"Reliability of CRPs — reliability","text":"reliability defined \\(1 - Intra_{HD}\\)","code":""},{"path":"https://servinagrero.github.io/pufr/reference/reliability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reliability of CRPs — reliability","text":"","code":"reliability(crps, ref_sample = 1)"},{"path":"https://servinagrero.github.io/pufr/reference/reliability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reliability of CRPs — reliability","text":"crps binary vector, 2D matrix 3D array. ref_sample Numeric index reference sample: crps vector, index reference sample; crps 2D matrix, row use reference; crps 3D array,row 3rd dimension matrix.","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/reliability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reliability of CRPs — reliability","text":"","code":"## Set of CRPs mat <- matrix(rbits(200), nrow = 10, ncol = 20) intra <- intra_hd(mat, 1) all(1 - intra == reliability(mat, 1)) #> [1] TRUE"},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniqueness of CRPs — uniqueness","title":"Uniqueness of CRPs — uniqueness","text":"uniqueness calculated average hamming distance CRPs two devices, every pair devices. number pairs devices calculated following formula, \\(D\\) number devices. $$N = \\frac{D(D-1)}{2}$$","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniqueness of CRPs — uniqueness","text":"","code":"uniqueness(crps)  inter_hd(crps)"},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniqueness of CRPs — uniqueness","text":"crps logical numeric matrix","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniqueness of CRPs — uniqueness","text":"uniqueness CRP table","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniqueness of CRPs — uniqueness","text":"","code":"mat <- matrix(rbits(100), nrow = 10, ncol = 10) uniqueness(mat) #>  [1] 0.5 0.5 0.6 0.4 0.5 0.8 0.5 0.3 0.6 0.4 0.5 0.5 0.4 0.7 0.6 0.6 0.7 0.7 0.5 #> [20] 0.6 0.5 0.6 0.4 0.5 0.4 0.7 0.6 0.3 0.7 0.6 0.5 0.4 0.9 0.3 0.4 0.5 0.4 0.6 #> [39] 0.3 0.5 0.5 0.4 0.2 0.5 0.5"},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-040","dir":"Changelog","previous_headings":"","what":"pufr 0.4.0","title":"pufr 0.4.0","text":"Renamed crps_uniqueness uniqueness. Add entropy_shannon, entropy_bits entropy_p. Add compare_pairwise compare matrix pairs rows. Make intra_hd accept vector, matrix array. Add reliability compute complementary intra_hd.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-030","dir":"Changelog","previous_headings":"","what":"pufr 0.3.0","title":"pufr 0.3.0","text":"crps_uniqueness now returns list values instead average uniqueness. (#1) intra_hd returns 2D matrix argument supplied 3D array. Added %<>% %<\/>% operators hamming distance.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-021","dir":"Changelog","previous_headings":"","what":"pufr 0.2.1","title":"pufr 0.2.1","text":"Add register_parallel function register parallel cluster.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-020","dir":"Changelog","previous_headings":"","what":"pufr 0.2.0","title":"pufr 0.2.0","text":"Add automatic detection parallel package parallelize computations. Renamed uniqueness crps_uniqueness. Renamed entropy_lgl entropy_bits. Add unit test suite.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-010","dir":"Changelog","previous_headings":"","what":"pufr 0.1.0","title":"pufr 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
