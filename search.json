[{"path":"https://servinagrero.github.io/pufr/articles/pufr.html","id":"physical-unclonable-functions","dir":"Articles","previous_headings":"","what":"Physical Unclonable Functions","title":"Introduction to pufr","text":"Physical Unclonable Functions, commonly knows PUFs, mechanism leverages manufacture variability devices generate secrets. PUF interrogated means challenge returns response, normally bit. challenge corresponding response called Challenge Response Pair(CRP). set CRPs physical device different CRPs different device.","code":""},{"path":"https://servinagrero.github.io/pufr/articles/pufr.html","id":"getting-started","dir":"Articles","previous_headings":"Physical Unclonable Functions","what":"Getting started","title":"Introduction to pufr","text":"library can make use parallel make computations faster. packet installed, loaded context created automatically.","code":"library(pufr)"},{"path":"https://servinagrero.github.io/pufr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sergio Vinagrero. Maintainer.","code":""},{"path":"https://servinagrero.github.io/pufr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vinagrero S (2023). pufr: Tools Analysis Physical Unclonable Functions (PUFs). https://github.com/servinagrero/pufr, https://servinagrero.github.io/pufr/.","code":"@Manual{,   title = {pufr: Tools For Analysis Of Physical Unclonable Functions (PUFs)},   author = {Sergio Vinagrero},   year = {2023},   note = {https://github.com/servinagrero/pufr, https://servinagrero.github.io/pufr/}, }"},{"path":[]},{"path":"https://servinagrero.github.io/pufr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"Physical Unclonable Functions, commonly knows PUFs, mechanism leverages manufacture variability devices generate secrets. PUFs can used identify devices generate secrets. package provides functions algorithms analysis evaluation. can learn PUFs evaluation vignette(\"pufr\").","code":""},{"path":"https://servinagrero.github.io/pufr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"can install development version pufr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"servinagrero/pufr\")"},{"path":"https://servinagrero.github.io/pufr/reference/crps_uniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniqueness of CRPs — crps_uniqueness","title":"Uniqueness of CRPs — crps_uniqueness","text":"uniqueness calculated average hamming distance CRPs two devices, every pair devices.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_uniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniqueness of CRPs — crps_uniqueness","text":"","code":"crps_uniqueness(crps)  inter_hd(crps)"},{"path":"https://servinagrero.github.io/pufr/reference/crps_uniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniqueness of CRPs — crps_uniqueness","text":"crps logical numeric matrix","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_uniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniqueness of CRPs — crps_uniqueness","text":"uniqueness CRP table","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_uniqueness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uniqueness of CRPs — crps_uniqueness","text":"number pairs devices calculated : $$N = \\binom{D}{2} = \\frac{D!}{2 \\cdot (D - 2)!}$$ D represents number devices.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_uniqueness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniqueness of CRPs — crps_uniqueness","text":"","code":"mat <- matrix(sample(c(0, 1, 100, replace = TRUE)), nrow = 10, ncol = 10) crps_uniqueness(mat) #>  [1] 0.0 0.0 0.5 1.0 0.0 0.0 0.5 1.0 0.0 0.5 0.0 0.0 1.0 0.5 0.0 0.0 1.0 0.0 0.0 #> [20] 0.5 1.0 0.0 0.0 0.5 0.5 0.0 0.0 1.0 0.5 0.0 0.0 0.0 0.5 1.0 0.0 0.5 0.0 0.0 #> [39] 1.0 0.0 0.0 0.5 0.5 0.0 0.0"},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming weight of CRPs — crps_weight","title":"Hamming weight of CRPs — crps_weight","text":"function wrapper around hamming_weight used vectors 2D matrix. function assumes CRPs supplied 2D matrix, row corresponds device column corresponds CRP. another convetion used, modify parameter axis accordingly.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming weight of CRPs — crps_weight","text":"","code":"crps_weight(crps, axis = 1)"},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming weight of CRPs — crps_weight","text":"crps binary vector 2D matrix. axis axis calculate Hamming weight. 1 rows 2 columns.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming weight of CRPs — crps_weight","text":"Hamming weight CRPs","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"uniformity","dir":"Reference","previous_headings":"","what":"Uniformity","title":"Hamming weight of CRPs — crps_weight","text":"Uniformity measures distribution 1s 0s across CRPs device. calculate uniformity, axis 1. $$Uniformity = \\frac{1}{\\#C} \\sum_{c = 0}^{\\#C} crp_c$$","code":""},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"bitaliasing","dir":"Reference","previous_headings":"","what":"Bitaliasing","title":"Hamming weight of CRPs — crps_weight","text":"Bitaliasing measures distribution 1s 0s single CRPs across devices. calculate bitaliasing, axis 2. $$Bitaliasing = \\frac{1}{\\#D} \\sum_{d = 0}^{\\#D} crp_d$$","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/crps_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming weight of CRPs — crps_weight","text":"","code":"## Hamming weight of a binary vector v <- rbits(50) crps_weight(v) #> [1] 0.5  ## Uniformity of a set of CRPs mat <- matrix(rbits(500), nrow = 5, ncol = 10) #> Warning: data length differs from size of matrix: [500 != 5 x 10] crps_weight(mat, 1) #> [1] 0.4 0.4 0.4 0.2 0.3  ## Bitaliasing of a set of CRPs crps_weight(mat, 2) #>  [1] 0.4 0.2 0.6 0.4 0.2 0.2 0.6 0.4 0.2 0.2"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy optimized for binary vectors — entropy_bits","title":"Shannon entropy optimized for binary vectors — entropy_bits","text":"Shannon entropy vector calculated : $$H(X) := -\\sum_{x \\\\chi} p(x) \\log p(x) = E[-\\log p(x)]$$ \\(p(x)\\) refers \\(p(0)\\) \\(p(1)\\) binary vector. convention, assumed \\(0 \\log 0 = 0\\) \\(1 \\log 1 = 1\\). probability \\(p(1)\\) corresponds normalized hamming_weight vector.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy optimized for binary vectors — entropy_bits","text":"","code":"entropy_bits(v)"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy optimized for binary vectors — entropy_bits","text":"v binary vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy optimized for binary vectors — entropy_bits","text":"Shannon entropy vector","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shannon entropy optimized for binary vectors — entropy_bits","text":"","code":"entropy_bits(c(0, 0, 0)) #> [1] 0 entropy_bits(c(1, 1, 1)) #> [1] 0 entropy_bits(rbits(20)) #> [1] 0.9927745"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming distance of two vectors — hamming_dist","title":"Hamming distance of two vectors — hamming_dist","text":"Hamming distance two vectors","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming distance of two vectors — hamming_dist","text":"","code":"hamming_dist(x, y, norm = FALSE)  x %<>% y  x %<\/>% y"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming distance of two vectors — hamming_dist","text":"x numeric logical vector y numeric logical vector norm TRUE (default FALSE) normalize distance vector length","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming distance of two vectors — hamming_dist","text":"hamming distance","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming distance of two vectors — hamming_dist","text":"","code":"hamming_dist(c(0, 1, 0), c(0, 0, 0)) #> [1] 1 hamming_dist(c(0, 1, 0), c(0, 0, 0), norm = TRUE) #> [1] 0.3333333 c(0, 1, 0) %<>% c(1, 0, 0) #> [1] 2 c(0, 1, 0) %<\/>% c(1, 0, 0) #> [1] 0.6666667"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming weight of a binary vector — hamming_weight","title":"Hamming weight of a binary vector — hamming_weight","text":"Hamming weight number non null symbols vector. binary vector, corresponds number 1s.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming weight of a binary vector — hamming_weight","text":"","code":"hamming_weight(v, norm = FALSE)"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming weight of a binary vector — hamming_weight","text":"v logical numeric vector norm TRUE (default FALSE) normalize vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming weight of a binary vector — hamming_weight","text":"Hamming weight","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming weight of a binary vector — hamming_weight","text":"","code":"## Weight of the vector hamming_weight(c(0, 1, 1)) #> [1] 2  ## Normalized weight hamming_weight(c(0, 1, 1), norm = TRUE) #> [1] 0.6666667  ## `NA` are discarded hamming_weight(c(1, 0, NA)) #> [1] 1"},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Intra Hamming distance of CRPs — intra_hd","title":"Intra Hamming distance of CRPs — intra_hd","text":"intra Hamming distance two sets CRPs measures numbers CRPs differ. N sets CRPs equal intra Hamming distances 0. response reliable change time, thus, intra Hamming distance equal 0. crps 2D matrix, assumed row corresponds sample column CRP. ref_sample say row sample taken reference. case 3D matrix, row corresponds device, column CRP 3rd dimension different sample. order samples calculated setdiff(seq_len(nsamples), ref_sample) nsamples corresponds nrow(crps) case 2D matrix dim(crps)[3] case 3D matrix.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intra Hamming distance of CRPs — intra_hd","text":"","code":"intra_hd(crps, ref_sample = 1)"},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intra Hamming distance of CRPs — intra_hd","text":"crps binary 2D matrix 3D array ref_sample Row 2D matrix used reference CRPs","code":""},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intra Hamming distance of CRPs — intra_hd","text":"crps 2D matrix, vector size nrow(crps) - 1. crps 3D array, 2D matrix row contains intra Hamming distance samples device.","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intra Hamming distance of CRPs — intra_hd","text":"","code":"## Set of CRPs mat <- matrix(0, nrow = 10, ncol = 50) intra_hd(mat, 1) #> [1] 0 0 0 0 0 0 0 0 0  ## Set of devices with their respective samples mat <- array(rbits(10 * 50 * 3), dim = c(10, 50, 3)) intra_hd(mat) #>       [,1] [,2] #>  [1,] 0.50 0.48 #>  [2,] 0.54 0.58 #>  [3,] 0.62 0.50 #>  [4,] 0.62 0.46 #>  [5,] 0.44 0.44 #>  [6,] 0.52 0.62 #>  [7,] 0.44 0.58 #>  [8,] 0.60 0.54 #>  [9,] 0.42 0.54 #> [10,] 0.52 0.40"},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratio of bits in a binary vector — ratio_bits","title":"Ratio of bits in a binary vector — ratio_bits","text":"ratio calculated number 1s minus number 0s. positive ratio indicates 1s 0s, negative results indicates opposite. NA default accounted calculate length vector. can discarded using argument na.rm. using hamming_weight function, ratio can calculated following way. $$Ratio = \\frac{HW(v) - (\\#v - HW(v))}{\\#v} = \\frac{2 HW(v)}{\\#v}- 1$$ operator \\(\\#v\\) denotes number elements vector \\(v\\).","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratio of bits in a binary vector — ratio_bits","text":"","code":"ratio_bits(v, na.rm = FALSE)"},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratio of bits in a binary vector — ratio_bits","text":"v binary vector na.rm TRUE (default FALSE) account NA length vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ratio of bits in a binary vector — ratio_bits","text":"ratio bits binary vector","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ratio of bits in a binary vector — ratio_bits","text":"","code":"## Negative ratio ratio_bits(c(0, 1, 0)) #> [1] -0.3333333  ## Positive ratio ratio_bits(c(1, 1, 0)) #> [1] 0.3333333  ## `NA` are accounted for the length ratio_bits(c(1, 1, 0, NA, NA)) #> [1] -0.2  #' ## `NA` are discarded ratio_bits(c(1, 1, 0, NA, NA), na.rm = TRUE) #> [1] 0.3333333"},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":null,"dir":"Reference","previous_headings":"","what":"Random binary vector — rbits","title":"Random binary vector — rbits","text":"function wrapper around sample generate binary vectors.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random binary vector — rbits","text":"","code":"rbits(size, prob = NULL)"},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random binary vector — rbits","text":"size size vector prob numeric vector 2 values probabilities 0 1 respectively. default probabilities 0.5 .","code":""},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random binary vector — rbits","text":"generated binary vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random binary vector — rbits","text":"","code":"## Unbiased probabilities rbits(10) #>  [1] 1 1 0 0 0 0 0 1 1 0  ## Biased probabilities rbits(10, prob = c(0.1, 0.9)) #>  [1] 1 1 1 1 0 1 1 1 1 1"},{"path":"https://servinagrero.github.io/pufr/reference/register_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a parallel cluster — register_parallel","title":"Register a parallel cluster — register_parallel","text":"user create cluster close .","code":""},{"path":"https://servinagrero.github.io/pufr/reference/register_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a parallel cluster — register_parallel","text":"","code":"register_parallel(ctx)"},{"path":"https://servinagrero.github.io/pufr/reference/register_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a parallel cluster — register_parallel","text":"ctx cluster created parallel::makeCluster()","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/register_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a parallel cluster — register_parallel","text":"","code":"if (FALSE) { ctx <- parallel::makeCluster(2) register_parallel(ctx) }"},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-030","dir":"Changelog","previous_headings":"","what":"pufr 0.3.0","title":"pufr 0.3.0","text":"crps_uniqueness now returns list values instead average uniqueness. (#1) intra_hd returns 2D matrix argument supplied 3D array. Added %<>% %<\/>% operators hamming distance.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-021","dir":"Changelog","previous_headings":"","what":"pufr 0.2.1","title":"pufr 0.2.1","text":"Add register_parallel function register parallel cluster.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-020","dir":"Changelog","previous_headings":"","what":"pufr 0.2.0","title":"pufr 0.2.0","text":"Add automatic detection parallel package parallelize computations. Renamed uniqueness crps_uniqueness. Renamed entropy_lgl entropy_bits. Add unit test suite.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-010","dir":"Changelog","previous_headings":"","what":"pufr 0.1.0","title":"pufr 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
