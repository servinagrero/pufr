[{"path":"https://servinagrero.github.io/pufr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sergio Vinagrero. Maintainer.","code":""},{"path":"https://servinagrero.github.io/pufr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vinagrero S (2023). pufr: Tools Analysis Physical Unclonable Functions (PUFs). https://github.com/servinagrero/pufr, https://servinagrero.github.io/pufr/.","code":"@Manual{,   title = {pufr: Tools For Analysis Of Physical Unclonable Functions (PUFs)},   author = {Sergio Vinagrero},   year = {2023},   note = {https://github.com/servinagrero/pufr, https://servinagrero.github.io/pufr/}, }"},{"path":"https://servinagrero.github.io/pufr/index.html","id":"pufr-","dir":"","previous_headings":"","what":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"PUFr provides tools algorithms analysis Physical Unclonable Functions, commonly known PUFs.","code":""},{"path":"https://servinagrero.github.io/pufr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"can install development version pufr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"servinagrero/pufr\")"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized Shannon entropy for logical vectors — entropy_lgl","title":"Optimized Shannon entropy for logical vectors — entropy_lgl","text":"Optimized Shannon entropy logical vectors","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized Shannon entropy for logical vectors — entropy_lgl","text":"","code":"entropy_lgl(v)"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimized Shannon entropy for logical vectors — entropy_lgl","text":"v logical numeric vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimized Shannon entropy for logical vectors — entropy_lgl","text":"Shannon entropy vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_lgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimized Shannon entropy for logical vectors — entropy_lgl","text":"","code":"entropy_lgl(c(0, 0, 0)) #> [1] 0 entropy_lgl(sample(c(0, 1), 20, replace = TRUE)) #> [1] 0.9709506"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming distance of two vectors — hamming_dist","title":"Hamming distance of two vectors — hamming_dist","text":"Hamming distance two vectors","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming distance of two vectors — hamming_dist","text":"","code":"hamming_dist(x, y, norm = FALSE)"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming distance of two vectors — hamming_dist","text":"x numeric logical vector y numeric logical vector norm `TRUE` (default `FALSE`) normalize distance vector length","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming distance of two vectors — hamming_dist","text":"hamming distance","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming distance of two vectors — hamming_dist","text":"","code":"hamming_dist(c(0, 1, 0), c(0, 0, 0)) #> [1] 1 hamming_dist(c(0, 1, 0), c(0, 0, 0), norm = TRUE) #> [1] 0.3333333"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming weight of a vector — hamming_weight","title":"Hamming weight of a vector — hamming_weight","text":"hamming weight number non null symbols vector. case, number 1s.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming weight of a vector — hamming_weight","text":"","code":"hamming_weight(v)"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming weight of a vector — hamming_weight","text":"v logical numeric vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming weight of a vector — hamming_weight","text":"hamming weight","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming weight of a vector — hamming_weight","text":"","code":"hamming_weight(c(0, 1, 1)) #> [1] 2 hamming_weight(c(TRUE, TRUE, TRUE)) #> [1] 3"},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratio of bits in a vector — ratio_bits","title":"Ratio of bits in a vector — ratio_bits","text":"ratio calculated number ones minus number zeros.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratio of bits in a vector — ratio_bits","text":"","code":"ratio_bits(v, abs = TRUE)"},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratio of bits in a vector — ratio_bits","text":"v logical numeric vector abs `TRUE` (default) ratio absolute","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ratio of bits in a vector — ratio_bits","text":"ratio bits","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ratio of bits in a vector — ratio_bits","text":"$$Ratio = \\frac{\\sum_{=0}^{n} v_i}{n}$$ ratio absolute, positive result indicates 1s 0s, negative results indicates opposite.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ratio of bits in a vector — ratio_bits","text":"","code":"ratio_bits(c(TRUE, FALSE, TRUE), abs = TRUE) #> [1] 0.3333333 ratio_bits(c(0, 1, 0), abs = FALSE) #> [1] -0.3333333 ratio_bits(c(0, 1, 0, 1)) #> [1] 0"},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniqueness of a CRP table — uniqueness","title":"Uniqueness of a CRP table — uniqueness","text":"uniqueness calculated average hamming distance CRPs two devices, every pair devices.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniqueness of a CRP table — uniqueness","text":"","code":"uniqueness(crps)"},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniqueness of a CRP table — uniqueness","text":"crps logical numeric matrix","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniqueness of a CRP table — uniqueness","text":"uniqueness CRP table","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniqueness of a CRP table — uniqueness","text":"","code":"mat <- matrix(sample(c(0, 1, 100, replace = TRUE)), nrow = 10, ncol = 10) uniqueness(mat) #> [1] 0.3111111"}]
