[{"path":"https://servinagrero.github.io/pufr/articles/pufr.html","id":"physical-unclonable-functions","dir":"Articles","previous_headings":"","what":"Physical Unclonable Functions","title":"Introduction to pufr","text":"Physical Unclonable Functions, commonly knows PUFs, mechanism leverages manufacture variability devices generate secrets. PUF interrogated means challenge returns response, normally bit. challenge corresponding response called Challenge Response Pair(CRP). set CRPs physical device different CRPs different device.","code":""},{"path":"https://servinagrero.github.io/pufr/articles/pufr.html","id":"getting-started","dir":"Articles","previous_headings":"Physical Unclonable Functions","what":"Getting started","title":"Introduction to pufr","text":"library can make use parallel make computations faster. packet installed, loaded context created automatically.","code":"library(pufr)"},{"path":"https://servinagrero.github.io/pufr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sergio Vinagrero. Maintainer.","code":""},{"path":"https://servinagrero.github.io/pufr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vinagrero S (????). pufr: Tools Analysis Physical Unclonable Functions (PUFs). R package version 0.5.1, https://github.com/servinagrero/pufr,https://servinagrero.github.io/pufr/.","code":"@Manual{pufr,   title = {{pufr}: Tools For Analysis Of Physical Unclonable Functions (PUFs)},   author = {Sergio Vinagrero},   url = {https://github.com/servinagrero/pufr, https://servinagrero.github.io/pufr/},   note = {R package version 0.5.1}, }"},{"path":[]},{"path":"https://servinagrero.github.io/pufr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"Physical Unclonable Functions, commonly knows PUFs, mechanism leverages manufacture variability devices generate secrets. PUFs can used identify devices generate secrets. package provides functions algorithms analysis evaluation. functions provided package optimised fast enough use cases. Python implementation can found Github. can learn PUFs evaluation vignette(\"pufr\").","code":""},{"path":"https://servinagrero.github.io/pufr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"can install development version pufr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"servinagrero/pufr\")"},{"path":"https://servinagrero.github.io/pufr/index.html","id":"basic-functionality","dir":"","previous_headings":"","what":"Basic functionality","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"PUFR provides functions operators work bit vectors (vectors containing 1s 0s) CRPs matrices (2D 3D matrices 1s 0s).","code":"library(pufr)  # rbits can be used to generate bits with desired probabilities v1 <- rbits(50) v2 <- rbits(50)  hamming_dist(v1, v2) #> [1] 19 # Or alternatively v1 %HD% v2 #> [1] 19  # Shannon entropy for bit vectors entropy_bits(v1) #> [1] 0.9895875"},{"path":"https://servinagrero.github.io/pufr/index.html","id":"metrics","dir":"","previous_headings":"","what":"Metrics","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"PUFR provides utilities calculate canonical metrics (uniformity, bitaliasing, uniqueness reliability) CRPs. can calculated using respective functions. metrics can calculated using metrics function, handles 2D 3D matrices.","code":"# 5 devices with 10 challenges each crps <- rbits(c(5, 10))  uniformity(crps) #> [1] 0.5 0.5 0.4 0.6 0.4 bitaliasing(crps) #>  [1] 0.4 0.6 0.8 0.6 0.4 0.4 0.2 0.6 0.2 0.6 uniqueness(crps) #>  [1] 0.6 0.3 0.5 0.1 0.5 0.7 0.5 0.2 0.8 0.4  # For a 2D matrix, each column contains a sample # In a 3D matrix, the 3rd dimension represents the samples # 5 samples of 5 devices with 10 challenges each crps <- rbits(c(5, 10, 5)) reliability(crps) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,] 1.00 0.75 0.25 0.75 0.25 0.25 0.25 0.75 0.00  0.50 #> [2,] 0.75 0.75 0.25 0.50 1.00 0.50 0.50 0.75 0.25  0.25 #> [3,] 0.50 0.75 0.25 0.75 1.00 0.25 0.50 0.50 1.00  0.75 #> [4,] 0.25 0.50 0.25 0.75 0.25 0.50 0.50 0.50 0.75  0.25 #> [5,] 0.50 0.50 0.50 0.25 0.25 0.50 0.75 0.25 0.50  0.25 crps <- rbits(c(5, 10)) met <- metrics(crps)"},{"path":"https://servinagrero.github.io/pufr/index.html","id":"exploration-of-metrics","dir":"","previous_headings":"Metrics","what":"Exploration of metrics","title":"Tools For Analysis Of Physical Unclonable Functions (PUFs)","text":"Metrics created metrics function can plotted summarised easily. case 2D CRP matrix, 3 histograms created, uniformity, bitaliasing uniqueness respectively.  case 3D CRP matrix, response samples drawn 3rd dimension. histograms now grouped per sample additional raster plot created show reliability independent response.","code":"crps <- rbits(c(10, 100)) plot(metrics(crps)) crps <- rbits(c(10, 100, 5)) plot(metrics(crps))"},{"path":"https://servinagrero.github.io/pufr/reference/bitaliasing.html","id":null,"dir":"Reference","previous_headings":"","what":"Bitaliasing of a CRP matrix — bitaliasing","title":"Bitaliasing of a CRP matrix — bitaliasing","text":"Unlike Uniformity, make sense calculate bitaliasing single bit vector. Thus, bitaliasing works 2D matrix.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/bitaliasing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bitaliasing of a CRP matrix — bitaliasing","text":"","code":"bitaliasing(crps)"},{"path":"https://servinagrero.github.io/pufr/reference/bitaliasing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bitaliasing of a CRP matrix — bitaliasing","text":"crps bit vector 2D CRP matrix","code":""},{"path":"https://servinagrero.github.io/pufr/reference/bitaliasing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bitaliasing of a CRP matrix — bitaliasing","text":"normalized Hamming weight column.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/bitaliasing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bitaliasing of a CRP matrix — bitaliasing","text":"Like Unformity, function assumes CRPs supplied 2D matrix, row corresponds device column corresponds CRP. Bitaliasing measures distribution 1s 0s single CRPs across devices. $$Bitaliasing(c) = \\frac{1}{\\#D} \\sum_{d \\D} r_c$$","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/bitaliasing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bitaliasing of a CRP matrix — bitaliasing","text":"","code":"## Bitaliasing of a matrix bitaliasing(rbits(c(5, 50))) #>  [1] 0.4 0.4 0.4 1.0 0.4 0.8 0.8 0.4 0.6 0.8 0.2 0.6 0.6 0.4 0.2 0.4 0.6 0.2 0.6 #> [20] 0.4 0.8 0.6 0.6 0.8 0.4 0.8 0.8 0.2 0.0 0.0 0.4 0.2 0.0 0.4 0.2 0.4 0.6 0.8 #> [39] 0.4 0.8 0.4 0.6 0.4 0.6 0.8 0.8 0.4 0.8 0.8 0.8"},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare a matrix by pairs of rows — compare_pairwise","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"pair rows compared using given function. pairs chosen without repetition.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"","code":"compare_pairwise(m, fn, ...)"},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"m Vector values. fn Function receives two row vectors. ... Rest arguments passed fn.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"List containing results applying function pair rows.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/compare_pairwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare a matrix by pairs of rows — compare_pairwise","text":"","code":"#' Compare a matrix by pairs of rows m <- rbits(c(5, 5)) res <- compare_pairwise(m, hamming_dist, norm = TRUE) unlist(res) #>  [1] 0.4 0.4 0.2 0.8 0.8 0.6 0.4 0.2 0.4 0.6 length(res) == (5 * 4 / 2) #> [1] TRUE  ## Equivalence to uniqueness res <- compare_pairwise(m, function(f, s) 1 - hamming_dist(f, s, norm = TRUE)) all(uniqueness(m) == unlist(res)) #> [1] TRUE"},{"path":"https://servinagrero.github.io/pufr/reference/dim.pufmetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the dimensions of the metrics — dim.pufmetrics","title":"Returns the dimensions of the metrics — dim.pufmetrics","text":"dimensions defined number devices, number challenges number samples. 1 sample used, 3rd dimension defaults 1.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/dim.pufmetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the dimensions of the metrics — dim.pufmetrics","text":"","code":"# S3 method for pufmetrics dim(x)"},{"path":"https://servinagrero.github.io/pufr/reference/dim.pufmetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the dimensions of the metrics — dim.pufmetrics","text":"x PUF metrics","code":""},{"path":"https://servinagrero.github.io/pufr/reference/dim.pufmetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the dimensions of the metrics — dim.pufmetrics","text":"number devices, challenges samples metrics","code":""},{"path":"https://servinagrero.github.io/pufr/reference/dim.pufmetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the dimensions of the metrics — dim.pufmetrics","text":"","code":"crps <- rbits(c(5, 50)) dim(metrics(crps)) #> [1]  5 50  1  crps <- rbits(c(5, 50, 3)) dim(metrics(crps)) #> [1]  5 50  3"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy for binary vectors — entropy_bits","title":"Shannon entropy for binary vectors — entropy_bits","text":"Shannon entropy binary vectors","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy for binary vectors — entropy_bits","text":"","code":"entropy_bits(v)"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy for binary vectors — entropy_bits","text":"v binary vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy for binary vectors — entropy_bits","text":"Shannon entropy vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shannon entropy for binary vectors — entropy_bits","text":"probability \\(p(1)\\) corresponds normalized hamming_weight vector.","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/entropy_bits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shannon entropy for binary vectors — entropy_bits","text":"","code":"entropy_bits(c(0, 0, 0)) #> [1] 0 entropy_bits(c(1, 1, 1)) #> [1] 0 entropy_bits(rbits(20)) #> [1] 0.9709506"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy for probabilities — entropy_p","title":"Shannon entropy for probabilities — entropy_p","text":"Shannon entropy probabilities","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy for probabilities — entropy_p","text":"","code":"entropy_p(v)"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy for probabilities — entropy_p","text":"v vector probabilities value treated probability success P(1)","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy for probabilities — entropy_p","text":"Shannon entropy probability","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon entropy for numeric values — entropy_shannon","title":"Shannon entropy for numeric values — entropy_shannon","text":"Shannon entropy vector calculated : $$H(X) := -\\sum_{x \\\\chi} p(x) \\log p(x) = E[-\\log p(x)]$$","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon entropy for numeric values — entropy_shannon","text":"","code":"entropy_shannon(v)"},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon entropy for numeric values — entropy_shannon","text":"v vector values","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon entropy for numeric values — entropy_shannon","text":"Shannon entropy vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shannon entropy for numeric values — entropy_shannon","text":"calculating probabilities, assumed convention \\((0\\cdot \\log 0 = 0)\\) \\((1 \\cdot \\log 1 = 1)\\).","code":""},{"path":"https://servinagrero.github.io/pufr/reference/entropy_shannon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shannon entropy for numeric values — entropy_shannon","text":"","code":"v <- sample(1:10, 50, TRUE, rep(0.1, 10)) entropy_shannon(v) #> [1] 3.088767"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming distance of two vectors — hamming_dist","title":"Hamming distance of two vectors — hamming_dist","text":"Hamming distance two vectors corresponds number positions values differ.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming distance of two vectors — hamming_dist","text":"","code":"hamming_dist(x, y, norm = FALSE)  x %HD% y  x %NHD% y"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming distance of two vectors — hamming_dist","text":"x numeric logical vector y numeric logical vector norm TRUE normalize distance vector length. default FALSE","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming distance of two vectors — hamming_dist","text":"Hamming distance","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hamming distance of two vectors — hamming_dist","text":"NAs discarded vectors using na.rm = TRUE sum.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming distance of two vectors — hamming_dist","text":"","code":"hamming_dist(c(0, 1, 0), c(0, 0, 0)) #> [1] 1 hamming_dist(c(0, 1, 0), c(0, 0, 0), norm = TRUE) #> [1] 0.3333333  ## NAs in any of the vectors are discarded hamming_dist(c(1, NA, 3, 4, 5), c(1, 2, NA, 4, 5)) #> [1] 0 c(0, 1, 0) %HD% c(1, 0, 0) #> [1] 2 c(0, 1, 0) %NHD% c(1, 0, 0) #> [1] 0.6666667"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Hamming weight of a binary vector — hamming_weight","title":"Hamming weight of a binary vector — hamming_weight","text":"Hamming weight number non null symbols vector. binary vector, corresponds number 1s.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hamming weight of a binary vector — hamming_weight","text":"","code":"hamming_weight(v, norm = FALSE)"},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hamming weight of a binary vector — hamming_weight","text":"v logical numeric vector norm TRUE (default FALSE) normalize vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hamming weight of a binary vector — hamming_weight","text":"Hamming weight","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hamming weight of a binary vector — hamming_weight","text":"NAs discarded vector using na.rm = TRUE sum.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/hamming_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hamming weight of a binary vector — hamming_weight","text":"","code":"## Weight of the vector hamming_weight(c(0, 1, 1)) #> [1] 2  ## Normalized weight hamming_weight(c(0, 1, 1), norm = TRUE) #> [1] 0.6666667  ## `NA` are discarded hamming_weight(c(1, 0, NA), norm = TRUE) #> [1] 0.5"},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":null,"dir":"Reference","previous_headings":"","what":"Intra Hamming distance of CRPs — intra_hd","title":"Intra Hamming distance of CRPs — intra_hd","text":"intra Hamming distance two sets CRPs measures numbers CRPs differ. N sets CRPs equal intra Hamming distances 0. response reliable change time, thus, intra Hamming distance equal 0. crps 2D matrix, assumed row corresponds sample column CRP. ref_sample dictate row sample taken reference. case 3D matrix, row corresponds device, column CRP 3rd dimension represents different samples.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intra Hamming distance of CRPs — intra_hd","text":"","code":"intra_hd(crps, ref = 1)"},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intra Hamming distance of CRPs — intra_hd","text":"crps binary vector, 2D matrix 3D array. ref Numeric index reference sample: crps vector, index reference sample; crps 2D matrix, row use reference; crps 3D array, row 3rd dimension matrix.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intra Hamming distance of CRPs — intra_hd","text":"crps vector, intra Hamming distance vector. crps 2D matrix, reliability column vector size ncol(crps) - 1. crps 3D array, 2D matrix row contains intra Hamming distance samples. TODO: Maybe return list comparison calculate mean sd","code":""},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Intra Hamming distance of CRPs — intra_hd","text":"order samples calculated setdiff(seq_len(nsamples), ref_sample) nsamples corresponds nrow(crps) case 2D matrix dim(crps)[3] case 3D matrix.","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/intra_hd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intra Hamming distance of CRPs — intra_hd","text":"","code":"## Bit values v <- c(1, 0, 0, 1, 1) intra_hd(v, 1) #> [1] 0 0 1 1  ## Set of CRPs mat <- rbits(c(5, 10)) intra_hd(mat, 1) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    0    0    1    0    1    1    0    0    1     0 #> [2,]    1    1    1    1    1    1    1    0    0     1 #> [3,]    0    1    0    1    1    0    1    0    1     1 #> [4,]    1    0    1    1    1    1    0    0    0     0  ## Set of devices with their respective samples mat <- rbits(c(5, 10, 3)) intra_hd(mat) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]  0.5  0.5  0.0  0.5  1.0  0.0  0.5  0.0  0.5   0.0 #> [2,]  0.5  0.0  0.5  0.0  0.5  0.5  0.5  1.0  1.0   0.5 #> [3,]  1.0  0.5  0.0  0.0  1.0  0.5  0.5  0.5  1.0   0.5 #> [4,]  0.0  1.0  0.5  1.0  0.0  0.5  1.0  1.0  0.0   1.0 #> [5,]  1.0  1.0  0.5  1.0  1.0  0.5  0.5  0.5  0.5   0.5"},{"path":"https://servinagrero.github.io/pufr/reference/metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the quality metrics of the given CRP matrix — metrics","title":"Compute the quality metrics of the given CRP matrix — metrics","text":"Compute quality metrics given CRP matrix","code":""},{"path":"https://servinagrero.github.io/pufr/reference/metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the quality metrics of the given CRP matrix — metrics","text":"","code":"metrics(crps, with_entropy = FALSE)"},{"path":"https://servinagrero.github.io/pufr/reference/metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the quality metrics of the given CRP matrix — metrics","text":"crps 2D 3D CRP matrix with_entropy TRUE, wrap results metrics Shannon entropy. default FALSE.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the quality metrics of the given CRP matrix — metrics","text":"calculated metrics pufmetrics object.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the quality metrics of the given CRP matrix — metrics","text":"","code":"crps <- rbits(c(5, 50)) metrics(crps) #> $reliability #> [1] NA #>  #> $devices #> [1] 1 2 3 4 5 #>  #> $challenges #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #>  #> $uniformity #> [1] 0.56 0.42 0.44 0.42 0.44 #>  #> $bitaliasing #>  [1] 0.2 0.4 0.8 0.2 0.2 0.6 0.2 0.6 0.6 0.8 0.4 0.4 0.4 0.4 0.6 0.4 0.2 0.6 0.6 #> [20] 0.8 0.4 0.4 0.6 0.4 0.4 0.4 0.6 0.6 0.2 0.4 0.6 0.8 0.6 0.4 0.4 0.2 0.2 0.4 #> [39] 0.8 0.2 0.2 0.8 0.2 0.6 0.4 0.4 0.6 0.6 0.0 0.6 #>  #> $uniqueness #>  [1] 0.54 0.48 0.42 0.44 0.54 0.52 0.54 0.46 0.44 0.42 #>  #> attr(,\"class\") #> [1] \"pufmetrics\"  crps <- rbits(c(5, 50, 3)) metrics(crps) #> $reliability #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]  1.0  1.0  0.0  1.0  0.0  1.0    1  0.0  0.5   1.0   0.0   0.0   1.0   0.5 #> [2,]  1.0  0.0  0.5  0.5  1.0  0.5    0  0.0  1.0   0.5   0.0   1.0   1.0   0.0 #> [3,]  0.5  0.5  0.5  1.0  0.0  0.0    1  0.5  0.0   0.5   0.5   0.5   0.0   1.0 #> [4,]  0.5  1.0  0.5  1.0  0.5  0.5    1  0.5  0.5   0.0   0.0   0.0   0.5   1.0 #> [5,]  0.5  0.0  0.5  0.5  0.5  1.0    0  0.0  0.0   1.0   0.5   0.5   0.5   0.5 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]   1.0   0.5   1.0   0.5   0.5   0.0   0.5   0.5   0.5   0.5   0.0   0.0 #> [2,]   0.5   0.5   0.5   1.0   0.5   0.5   0.5   0.5   0.5   0.5   0.5   0.0 #> [3,]   0.5   1.0   0.5   0.5   0.5   0.5   0.5   1.0   0.5   0.5   0.0   0.5 #> [4,]   0.0   0.5   0.5   1.0   0.5   0.5   0.5   0.5   0.5   1.0   0.5   0.0 #> [5,]   1.0   0.5   0.5   0.5   0.5   0.5   0.5   0.5   1.0   0.5   0.5   0.5 #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,]   0.5   1.0     0   0.0   1.0   0.5   0.5   0.5   0.5   0.0   0.5   0.0 #> [2,]   0.0   0.5     1   0.5   0.5   0.5   0.0   0.5   0.5   1.0   0.0   0.5 #> [3,]   1.0   0.0     0   1.0   0.5   0.0   0.5   1.0   1.0   0.0   1.0   0.0 #> [4,]   1.0   0.0     1   0.5   0.5   0.0   1.0   0.5   0.0   0.0   1.0   0.5 #> [5,]   1.0   1.0     1   0.0   1.0   0.0   0.5   0.0   0.0   0.5   0.5   0.5 #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,]   0.0   0.0   0.5   1.0   0.0   0.0   0.0   1.0   0.0   0.5   1.0   0.5 #> [2,]   0.5   0.0   1.0   0.5   0.0   0.5   1.0   0.5   1.0   0.5   0.5   0.0 #> [3,]   1.0   0.0   0.5   0.0   0.0   0.5   0.5   0.5   0.5   1.0   0.5   0.0 #> [4,]   1.0   0.5   0.5   0.5   0.5   1.0   0.5   0.5   0.0   0.5   0.5   0.5 #> [5,]   0.0   0.5   0.0   0.5   0.5   0.0   0.5   0.5   0.5   0.0   1.0   0.0 #>  #> $devices #> [1] 1 2 3 4 5 #>  #> $challenges #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #>  #> $samples #> [1] 1 2 3 #>  #> $uniformity #> $uniformity[[1]] #> [1] 0.58 0.52 0.50 0.52 0.48 #>  #> $uniformity[[2]] #> [1] 0.52 0.64 0.48 0.58 0.48 #>  #> $uniformity[[3]] #> [1] 0.48 0.54 0.56 0.54 0.64 #>  #>  #> $bitaliasing #> $bitaliasing[[1]] #>  [1] 0.2 0.4 0.8 0.6 0.4 0.8 1.0 0.2 0.8 0.2 0.4 0.6 0.6 0.4 0.8 0.6 0.4 0.2 0.8 #> [20] 0.6 0.4 0.2 0.4 0.0 0.4 0.4 0.2 0.8 0.8 0.4 0.2 1.0 0.6 0.4 0.4 0.6 1.0 0.4 #> [39] 0.4 0.2 0.2 1.0 0.6 0.8 0.6 0.2 0.6 0.8 0.4 0.8 #>  #> $bitaliasing[[2]] #>  [1] 0.8 0.4 0.4 0.4 0.2 0.8 0.4 0.2 0.8 0.8 0.2 0.4 0.6 0.2 0.0 0.6 0.6 0.6 0.0 #> [20] 0.4 0.4 0.4 0.8 0.4 0.8 0.6 0.8 0.8 0.6 0.6 0.8 1.0 0.8 0.4 0.6 0.8 0.6 0.4 #> [39] 0.8 0.0 0.2 0.4 0.6 0.6 0.4 0.8 0.8 0.6 0.6 0.8 #>  #> $bitaliasing[[3]] #>  [1] 0.2 0.6 0.8 0.4 0.6 0.4 0.4 0.2 0.4 0.4 0.6 0.8 0.2 0.6 0.4 0.2 0.2 0.8 1.0 #> [20] 0.8 0.6 0.4 0.4 0.8 0.6 0.6 1.0 0.6 0.6 0.2 0.6 0.6 0.6 0.2 0.6 1.0 0.2 0.2 #> [39] 1.0 0.4 0.8 0.6 0.6 0.6 1.0 0.4 0.8 0.4 0.4 0.8 #>  #>  #> $uniqueness #> $uniqueness[[1]] #>  [1] 0.54 0.64 0.50 0.58 0.58 0.48 0.56 0.42 0.58 0.52 #>  #> $uniqueness[[2]] #>  [1] 0.48 0.60 0.46 0.56 0.52 0.46 0.44 0.58 0.68 0.50 #>  #> $uniqueness[[3]] #>  [1] 0.62 0.52 0.54 0.48 0.54 0.52 0.54 0.50 0.44 0.58 #>  #>  #> attr(,\"class\") #> [1] \"pufmetrics\""},{"path":"https://servinagrero.github.io/pufr/reference/plot.pufmetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plot with a summary of all the metrics — plot.pufmetrics","title":"Create a plot with a summary of all the metrics — plot.pufmetrics","text":"metrics come 2D CRP table, 3 histograms created uniformity, bitaliasing uniqueness.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/plot.pufmetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plot with a summary of all the metrics — plot.pufmetrics","text":"","code":"# S3 method for pufmetrics plot(x, ...)"},{"path":"https://servinagrero.github.io/pufr/reference/plot.pufmetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plot with a summary of all the metrics — plot.pufmetrics","text":"x PUF metrics ... Additional parameters","code":""},{"path":"https://servinagrero.github.io/pufr/reference/plot.pufmetrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a plot with a summary of all the metrics — plot.pufmetrics","text":"case 3D CRP table, 4 graphs created, 3 histograms uniformity, bitaliasing uniqueness, combining samples, matrix showing reliability response.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/plot.pufmetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a plot with a summary of all the metrics — plot.pufmetrics","text":"","code":"## With a single sample crps <- rbits(c(5, 50)) plot(metrics(crps))   ## With multiple samples crps <- rbits(c(5, 50, 3)) plot(metrics(crps))"},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratio of bits in a binary vector — ratio_bits","title":"Ratio of bits in a binary vector — ratio_bits","text":"ratio calculated number 1s minus number 0s. positive ratio indicates 1s 0s, negative results indicates opposite. NA accounted calculate length vector.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratio of bits in a binary vector — ratio_bits","text":"","code":"ratio_bits(v)"},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratio of bits in a binary vector — ratio_bits","text":"v binary vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ratio of bits in a binary vector — ratio_bits","text":"ratio bits binary vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ratio of bits in a binary vector — ratio_bits","text":"using hamming_weight function, ratio can calculated following way. $$Ratio = \\frac{HW(v) - (\\#v - HW(v))}{\\#v} = 2 \\cdot HW_{norm}(v) - 1$$ operator \\(\\#v\\) denotes number elements vector \\(v\\).","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/ratio_bits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ratio of bits in a binary vector — ratio_bits","text":"","code":"## Negative ratio ratio_bits(c(0, 1, 0)) #> [1] -0.3333333  ## Positive ratio ratio_bits(c(1, 1, 0)) #> [1] 0.3333333  ## `NA` are discarded ratio_bits(c(1, 1, 0, NA, NA)) #> [1] 0.3333333"},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":null,"dir":"Reference","previous_headings":"","what":"Random bit vector, matrix or array — rbits","title":"Random bit vector, matrix or array — rbits","text":"function wrapper around rbinom generate bit vectors. matrix array version creating row.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random bit vector, matrix or array — rbits","text":"","code":"rbits(size, p = 0.5, ...)"},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random bit vector, matrix or array — rbits","text":"size size vector. Can list dimensions create vector, matrix array. vector larger 3 provided, value treated probability obtaining 1 vector bits generated using binomial distribution. p Probability obtaining 1. default 0.5. ... Extra arguments passed matrix array","code":""},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random bit vector, matrix or array — rbits","text":"generated bit vector","code":""},{"path":"https://servinagrero.github.io/pufr/reference/rbits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random bit vector, matrix or array — rbits","text":"","code":"## Unbiased probabilities rbits(10) #>  [1] 1 1 1 0 0 0 1 0 0 0  ## Biased probabilities rbits(10, p = 0.8) #>  [1] 1 1 1 0 1 1 1 1 1 1  ## Matrix of bits rbits(c(3, 4)) #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    0 #> [2,]    1    1    1    1 #> [3,]    1    0    0    0  ## 3D Array of bits rbits(c(3, 4, 2)) #> , , 1 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    0    1    0    0 #> [2,]    1    1    0    0 #> [3,]    0    0    0    1 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    1    1 #> [2,]    0    1    1    1 #> [3,]    1    1    0    1 #>   ## Individual probabilities rbits(c(3, 3), runif(9, max = 0.5)) #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    1    0    1 #> [3,]    0    1    0"},{"path":"https://servinagrero.github.io/pufr/reference/reliability.html","id":null,"dir":"Reference","previous_headings":"","what":"Reliability of CRPs — reliability","title":"Reliability of CRPs — reliability","text":"reliability PUF defined \\(1 - Intra_{HD}\\)","code":""},{"path":"https://servinagrero.github.io/pufr/reference/reliability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reliability of CRPs — reliability","text":"","code":"reliability(crps, ref = 1)"},{"path":"https://servinagrero.github.io/pufr/reference/reliability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reliability of CRPs — reliability","text":"crps binary vector, 2D matrix 3D array. ref Numeric index reference sample: crps vector, index reference sample; crps 2D matrix, row use reference; crps 3D array, row 3rd dimension matrix.","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/reliability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reliability of CRPs — reliability","text":"","code":"## Set of CRPs mat <- matrix(rbits(200), nrow = 10, ncol = 20) intra <- intra_hd(mat, 1) all(1 - intra == reliability(mat, 1)) #> [1] TRUE"},{"path":"https://servinagrero.github.io/pufr/reference/uniformity.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniformity of a bit vector or a CRP matrix — uniformity","title":"Uniformity of a bit vector or a CRP matrix — uniformity","text":"function assumes CRPs supplied 2D matrix, row corresponds device column corresponds CRP.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniformity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniformity of a bit vector or a CRP matrix — uniformity","text":"","code":"uniformity(crps)"},{"path":"https://servinagrero.github.io/pufr/reference/uniformity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniformity of a bit vector or a CRP matrix — uniformity","text":"crps bit vector 2D CRP matrix","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniformity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniformity of a bit vector or a CRP matrix — uniformity","text":"crps vector, normalized Hamming weight. crps matrix, normalized Hamming weight row.","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniformity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uniformity of a bit vector or a CRP matrix — uniformity","text":"Uniformity measures distribution 1s 0s across CRPs device. calculate uniformity, margin 1. $$Uniformity(d) = \\frac{1}{\\#C} \\sum_{r \\R_d} r$$","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/uniformity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniformity of a bit vector or a CRP matrix — uniformity","text":"","code":"## Uniformity of a vector uniformity(rbits(50)) #> [1] 0.4  ## Uniformity of a matrix uniformity(rbits(c(10, 50))) #>  [1] 0.52 0.60 0.40 0.50 0.40 0.48 0.52 0.56 0.60 0.62"},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniqueness of CRPs — uniqueness","title":"Uniqueness of CRPs — uniqueness","text":"uniqueness calculated average hamming distance CRPs two devices, every pair devices. number pairs devices calculated following formula, \\(D\\) number devices. $$N = \\frac{D(D-1)}{2}$$","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniqueness of CRPs — uniqueness","text":"","code":"uniqueness(crps)  inter_hd(crps)"},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniqueness of CRPs — uniqueness","text":"crps logical numeric matrix","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniqueness of CRPs — uniqueness","text":"uniqueness CRP table","code":""},{"path":"https://servinagrero.github.io/pufr/reference/uniqueness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniqueness of CRPs — uniqueness","text":"","code":"mat <- rbits(c(10, 10)) uniqueness(mat) #>  [1] 0.8 0.7 0.6 0.5 0.7 0.2 0.5 0.5 0.3 0.7 0.4 0.5 0.5 0.4 0.3 0.5 0.5 0.5 0.6 #> [20] 0.6 0.3 0.6 0.4 0.2 0.7 0.5 0.2 0.5 0.5 0.5 0.6 0.5 0.4 0.2 0.6 0.5 0.6 0.4 #> [39] 0.2 0.5 0.3 0.7 0.4 0.4 0.4"},{"path":"https://servinagrero.github.io/pufr/reference/with_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert metrics to entropy calculation — with_entropy","title":"Convert metrics to entropy calculation — with_entropy","text":"Convert metrics entropy calculation","code":""},{"path":"https://servinagrero.github.io/pufr/reference/with_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert metrics to entropy calculation — with_entropy","text":"","code":"with_entropy(metrics)"},{"path":"https://servinagrero.github.io/pufr/reference/with_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert metrics to entropy calculation — with_entropy","text":"metrics pufmetrics object","code":""},{"path":"https://servinagrero.github.io/pufr/reference/with_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert metrics to entropy calculation — with_entropy","text":"new pufmetrics object metrics passed entropy_p description","code":""},{"path":[]},{"path":"https://servinagrero.github.io/pufr/reference/with_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert metrics to entropy calculation — with_entropy","text":"","code":"crps <- rbits(c(5, 50)) m <- metrics(crps) m #> $reliability #> [1] NA #>  #> $devices #> [1] 1 2 3 4 5 #>  #> $challenges #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #>  #> $uniformity #> [1] 0.48 0.48 0.42 0.44 0.46 #>  #> $bitaliasing #>  [1] 0.4 0.4 0.6 0.6 0.4 0.4 1.0 0.4 0.2 0.2 0.4 0.6 0.2 0.4 0.8 0.8 0.4 0.2 0.6 #> [20] 0.4 0.2 0.4 0.4 0.6 0.8 0.2 0.2 0.4 0.4 0.4 0.4 0.4 0.2 0.8 0.2 0.4 0.4 0.6 #> [39] 0.6 0.4 0.4 0.4 0.4 0.4 0.4 0.2 0.8 0.2 1.0 0.8 #>  #> $uniqueness #>  [1] 0.48 0.50 0.56 0.46 0.42 0.56 0.66 0.38 0.44 0.46 #>  #> attr(,\"class\") #> [1] \"pufmetrics\" with_entropy(m) #> $reliability #> [1] NA #>  #> $devices #> [1] 1 2 3 4 5 #>  #> $challenges #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #>  #> $uniformity #> [1] 0.9988455 0.9988455 0.9814539 0.9895875 0.9953784 #>  #> $bitaliasing #>  [1] 0.9709506 0.9709506 0.9709506 0.9709506 0.9709506 0.9709506 0.0000000 #>  [8] 0.9709506 0.7219281 0.7219281 0.9709506 0.9709506 0.7219281 0.9709506 #> [15] 0.7219281 0.7219281 0.9709506 0.7219281 0.9709506 0.9709506 0.7219281 #> [22] 0.9709506 0.9709506 0.9709506 0.7219281 0.7219281 0.7219281 0.9709506 #> [29] 0.9709506 0.9709506 0.9709506 0.9709506 0.7219281 0.7219281 0.7219281 #> [36] 0.9709506 0.9709506 0.9709506 0.9709506 0.9709506 0.9709506 0.9709506 #> [43] 0.9709506 0.9709506 0.9709506 0.7219281 0.7219281 0.7219281 0.0000000 #> [50] 0.7219281 #>  #> $uniqueness #>  [1] 0.48 0.50 0.56 0.46 0.42 0.56 0.66 0.38 0.44 0.46 #>  #> attr(,\"class\") #> [1] \"pufmetrics\""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-051","dir":"Changelog","previous_headings":"","what":"pufr 0.5.1","title":"pufr 0.5.1","text":"General fixes Improved test suite. test suite used check proper behaviour functions used reference Python version. Store names crps (devices, challenges samples) computing metrics","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-050","dir":"Changelog","previous_headings":"","what":"pufr 0.5.0","title":"pufr 0.5.0","text":"Make rbits create vector, matrix array, convenience purposes. Added pufmetrics class. Allows automatic plotting exploration metrics. Added compare_pairwise function perform functions pairs devices. Removed parallel code. needed, parallelization implemented user. Removed crps_weight function favor uniformity bitaliasing","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-040","dir":"Changelog","previous_headings":"","what":"pufr 0.4.0","title":"pufr 0.4.0","text":"Renamed crps_uniqueness uniqueness. Add entropy_shannon, entropy_bits entropy_p. Add compare_pairwise compare matrix pairs rows. Make intra_hd accept vector, matrix array. Add reliability compute complementary intra_hd.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-030","dir":"Changelog","previous_headings":"","what":"pufr 0.3.0","title":"pufr 0.3.0","text":"crps_uniqueness now returns list values instead average uniqueness. (#1) intra_hd returns 2D matrix argument supplied 3D array. Added %<>% %<\/>% operators hamming distance.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-021","dir":"Changelog","previous_headings":"","what":"pufr 0.2.1","title":"pufr 0.2.1","text":"Add register_parallel function register parallel cluster.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-020","dir":"Changelog","previous_headings":"","what":"pufr 0.2.0","title":"pufr 0.2.0","text":"Add automatic detection parallel package parallelize computations. Renamed uniqueness crps_uniqueness. Renamed entropy_lgl entropy_bits. Add unit test suite.","code":""},{"path":"https://servinagrero.github.io/pufr/news/index.html","id":"pufr-010","dir":"Changelog","previous_headings":"","what":"pufr 0.1.0","title":"pufr 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
